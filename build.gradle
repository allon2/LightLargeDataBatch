apply plugin: 'java'
apply plugin: 'maven'

group = 'cn.ymotel'
version = '0.0.1-SNAPSHOT'

description = "largedatabtach"

sourceCompatibility = 1.6
targetCompatibility = 1.6
compileJava.options.encoding = 'UTF-8'



repositories {
        
     maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
}
dependencies {
// https://mvnrepository.com/artifact/org.apache.commons/commons-pool2
    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.6.0'
// https://mvnrepository.com/artifact/org.springframework/spring-beans
    compile group: 'org.springframework', name: 'spring-context', version: '4.3.20.RELEASE'
    compile group: 'net.jcip', name: 'jcip-annotations', version:'1.0'
// https://mvnrepository.com/artifact/org.mybatis/mybatis
    compile group: 'org.mybatis', name: 'mybatis', version: '3.4.6'

}
//在项目根目录下执行命令 `./gradlew :jlibwithsource:clean :jlibwithsource:publish`, 来发布当前jar包
//使用这个配置发布的包包括: 源码打成的jar包和class文件打成的jar包
apply plugin: "maven-publish"
//重新已有的task (用于打包源文件, 用于定义某个`publication`中的源文件包, 如下面的: `artifact sourceJar`)
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources" //定义一个标志 (生成的jar包后面加上sources, 如: jlib-2.2.11-sources.jar)
}

publishing {
    publications {
        maven(MavenPublication) {
            //打包源码和class
            from components.java    //发布java组件

            //定义源码task
            artifact sourceJar
     
            //定义包的坐标:
//            groupId 'com.stone.jlibwithsource.jlib'
//            artifactId 'jlib'
//            version '2.2.11'
        }
    }


    //定义目标仓库 (包所存放的地方)
    repositories {
        //发布到自定义的目录
//        maven {
//            url '../repo' //本地仓库 (包存放在项目更目录下的repo目录)
//        }

        //发布到本地maven仓库 (~/.m2/repository)
        mavenLocal()
    }
}
